#define TAK

piece base, hull, turret_20, gun_20, barrel_20, flare_20, turret_40, sleeve_40, barrel_40, flare_40,
	  mg_turret1, mg_guns1, mg_flare1_1, mg_flare1_2, mg_turret2, mg_guns2, mg_flare2_1, mg_flare2_2,
	  rack1, torpedo1, rack2, torpedo2, rack3, torpedo3, rack4, torpedo4,
	  wake1, wake2, wake3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Turret turn speeds
#define AA20_TURRET_TURN		<45>
#define AA20_TURRET_PITCH		<45>
#define AA20_BURSTRATE			150

#define AA40_TURRET_TURN		<30>
#define AA40_TURRET_PITCH		<30>
#define AA40_BURSTRATE			290

#define MG05_TURRET_TURN		<45>
#define MG05_TURRET_PITCH		<45>

//*********************Recoil
#define AA20_GUN_RECOIL			[0.4]
#define AA20_GUN_RECOIL_SPEED	[10]
#define AA20_GUN_BACK_SPEED		[2]

#define AA40_GUN_RECOIL			[0.4]
#define AA40_GUN_RECOIL_SPEED	[10]
#define AA40_GUN_BACK_SPEED		[4]
//*********************Death anim
#define HULL_LIST_SPEED		<30>
#define HULL_LIST_ANGLE_Z	<-45>
#define HULL_LIST_ANGLE_X	<-15>
//*********************FX
//effects
#define placeholder_EFFECT01 1024+1
#define placeholder_EFFECT02 1024+2
#define placeholder_EFFECT03 1024+3
#define placeholder_EFFECT04 1024+4
#define XSMALL_MUZZLEFLASH 1024+5
#define XSMALL_MUZZLEDUST 1024+6
#define MG_MUZZLEFLASH 1024+7
#define SMALL_MUZZLEFLASH 1024+8
#define SMALL_MUZZLEDUST 1024+9

//*********************Cruise mode
#define CRUISE_MODE_ANGLE	<-4>
#define CRUISE_MODE_RAISE_SPEED	<1>
#define CRUISE_MODE_START_DIVIDER	4
#define CRUISE_MODE_START_MULTIPLIER	3
#define CRUISE_MODE_PERIOD	250

#define RESTORE_PERIOD		2500

#define TORPEDO_RESTORE		30000

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_AIM4			32
#define SIG_AIM5			64
#define SIG_AIM6			128
#define SIG_AIM7			256
#define SIG_AIM8			512
#define SIG_AIM9			1024
#define SIG_AIM10			2048
#define SIG_AIM11			4096
#define SIG_AIM12			8192

#define SMOKEPIECE	hull

#include "exptype.h"
#include "sfxtype.h"
#include "damageSmoke.h"

//weapon anims
#define SHOT_20mm\
	emit-sfx XSMALL_MUZZLEFLASH from flare_20;\
	emit-sfx XSMALL_MUZZLEDUST from flare_20;\
	move barrel_20 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;\
	sleep AA20_BURSTRATE;\
	move barrel_20 to z-axis [0] speed AA20_GUN_BACK_SPEED;\
	hide flare_20;
	
#define SHOT_40mm\
	emit-sfx SMALL_MUZZLEFLASH from flare_40;\
	emit-sfx SMALL_MUZZLEDUST from flare_40;\
	move barrel_40 to z-axis (0-AA40_GUN_RECOIL) speed AA40_GUN_RECOIL_SPEED;\
	sleep AA40_BURSTRATE;\
	move barrel_40 to z-axis [0] speed AA40_GUN_BACK_SPEED;
	
static-var					MaxSpeed, CruiseTriggerSpeed, bMoving, mg_flare1, mg_flare2, isTorp1Ready, isTorp2Ready, isTorp3Ready, isTorp4Ready;

InitTurrets()
//Pre-position turrets
{
	turn turret_40 to y-axis <180> now;
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

CruiseControl()
{
	var CurrentSpeed;
	set-signal-mask SIG_DEATH;
	while(TRUE)
	{
		CurrentSpeed = get CURRENT_SPEED;
		if(CurrentSpeed > CruiseTriggerSpeed)
		{
			turn hull to x-axis CRUISE_MODE_ANGLE speed CRUISE_MODE_RAISE_SPEED;		
		} else
		{
			turn hull to x-axis <0> speed CRUISE_MODE_RAISE_SPEED;
		}
		sleep CRUISE_MODE_PERIOD;
	}
}


RestoreTorpedo1()
{
	while(TRUE)
	{
		if(!isTorp1Ready)
		{
			sleep TORPEDO_RESTORE;
			show torpedo1;
			isTorp1Ready = TRUE;
		}
		sleep 150;
	}
}

RestoreTorpedo2()
{
	while(TRUE)
	{
		if(!isTorp2Ready)
		{
			sleep TORPEDO_RESTORE;
			show torpedo2;
			isTorp2Ready = TRUE;
		}
		sleep 150;
	}
}

RestoreTorpedo3()
{
	while(TRUE)
	{
		if(!isTorp3Ready)
		{
			sleep TORPEDO_RESTORE;
			show torpedo3;
			isTorp3Ready = TRUE;
		}
		sleep 150;
	}
}

RestoreTorpedo4()
{
	while(TRUE)
	{
		if(!isTorp4Ready)
		{
			sleep TORPEDO_RESTORE;
			show torpedo4;
			isTorp4Ready = TRUE;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

Create()
{
	bMoving = FALSE;
	mg_flare1 = TRUE;
	mg_flare2 = TRUE;
	isTorp1Ready = TRUE;
	isTorp2Ready = TRUE;
	isTorp3Ready = TRUE;
	isTorp4Ready = TRUE;
	MaxSpeed = get MAX_SPEED;
	CruiseTriggerSpeed = MaxSpeed * CRUISE_MODE_START_MULTIPLIER / CRUISE_MODE_START_DIVIDER;
	call-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script CruiseControl();
	start-script RestoreTorpedo1();
	start-script RestoreTorpedo2();
	start-script RestoreTorpedo3();
	start-script RestoreTorpedo4();
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StopCatcher()
{
	var oldXZ, newXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	bMoving = TRUE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_AIM3|SIG_AIM4|SIG_AIM5|SIG_AIM6|SIG_AIM7|SIG_AIM8|SIG_AIM9|SIG_AIM10|SIG_AIM11|SIG_AIM12|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn turret_20 to y-axis <0> speed AA20_TURRET_TURN;
	turn gun_20 to x-axis <0> speed AA20_TURRET_PITCH;

	turn turret_40 to y-axis <180> speed AA40_TURRET_TURN;
	turn sleeve_40 to x-axis <0> speed AA40_TURRET_PITCH;

	turn mg_turret1 to y-axis <0> speed MG05_TURRET_TURN;
	turn mg_guns1 to x-axis <0> speed MG05_TURRET_PITCH;
	turn mg_turret2 to y-axis <0> speed MG05_TURRET_TURN;
	turn mg_guns2 to x-axis <0> speed MG05_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	piecenum = torpedo1;
}

AimFromWeapon1(piecenum)
{
	piecenum = torpedo1;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	if(!isTorp1Ready)
	{
		return FALSE;
	}
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	hide torpedo1;
	isTorp1Ready=FALSE;
	sleep 200;
}

QueryWeapon2(piecenum)
{
	piecenum = torpedo2;
}

AimFromWeapon2(piecenum)
{
	piecenum = torpedo2;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	if(!isTorp2Ready)
	{
		return FALSE;
	}
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
	hide torpedo2;
	isTorp2Ready = FALSE;
	sleep 200;
}

QueryWeapon3(piecenum)
{
	piecenum = torpedo3;
}

AimFromWeapon3(piecenum)
{
	piecenum = torpedo3;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	if(!isTorp3Ready)
	{
		return FALSE;
	}
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
	hide torpedo3;
	isTorp3Ready = FALSE;
	sleep 200;
}

QueryWeapon4(piecenum)
{
	piecenum = torpedo4;
}

AimFromWeapon4(piecenum)
{
	piecenum = torpedo4;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM4;
	set-signal-mask SIG_AIM4|SIG_DEATH;
	if(!isTorp4Ready)
	{
		return FALSE;
	}
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon4()
{
	hide torpedo4;
	isTorp4Ready = FALSE;
	sleep 200;
}
//bofors AA
QueryWeapon5(piecenum)
{
	piecenum = flare_40;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret_40;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM5;
	set-signal-mask SIG_AIM5|SIG_DEATH;
	turn turret_40 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_40 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_40 around y-axis;
	wait-for-turn sleeve_40 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon5()
{
	SHOT_40mm
	SHOT_40mm
}
//bofors HE (ground target)
QueryWeapon12(piecenum)
{
	piecenum = flare_40;
}

AimFromWeapon12(piecenum)
{
	piecenum = turret_40;
}

AimWeapon12(heading, pitch)
{
	signal SIG_AIM5;
	set-signal-mask SIG_AIM5|SIG_DEATH;
	turn turret_40 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_40 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_40 around y-axis;
	wait-for-turn sleeve_40 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon12()
{
	SHOT_40mm
	SHOT_40mm
}

//20mm AA
QueryWeapon6(piecenum)
{
	piecenum = flare_20;
}

AimFromWeapon6(piecenum)
{
	piecenum = turret_20;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM6;
	set-signal-mask SIG_AIM6|SIG_DEATH;
	turn turret_20 to y-axis heading speed AA20_TURRET_TURN;
	turn gun_20 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20 around y-axis;
	wait-for-turn gun_20 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon6()
{
	SHOT_20mm
	SHOT_20mm
	SHOT_20mm
	SHOT_20mm
	SHOT_20mm
}

//20mm HE/ground target
QueryWeapon7(piecenum)
{
	piecenum = flare_20;
}

AimFromWeapon7(piecenum)
{
	piecenum = turret_20;
}

AimWeapon7(heading, pitch)
{
	signal SIG_AIM6;
	set-signal-mask SIG_AIM6|SIG_DEATH;
	turn turret_20 to y-axis heading speed AA20_TURRET_TURN;
	turn gun_20 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20 around y-axis;
	wait-for-turn gun_20 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon7()
{
	SHOT_20mm
	SHOT_20mm
	SHOT_20mm
}

//.50 cal #1 air targets
QueryWeapon8(piecenum)
{
	if(mg_flare1)
	{
		piecenum = mg_flare1_1;
	} else
	{
		piecenum = mg_flare1_2;
	}
}

AimFromWeapon8(piecenum)
{
	piecenum = mg_turret1;
}

AimWeapon8(heading, pitch)
{
	signal SIG_AIM7;
	set-signal-mask SIG_AIM7|SIG_DEATH;
	turn mg_turret1 to y-axis heading speed MG05_TURRET_TURN;
	turn mg_guns1 to x-axis (0-pitch) speed MG05_TURRET_PITCH;
	wait-for-turn mg_turret1 around y-axis;
	wait-for-turn mg_guns1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

ShotWeapon8()
{
	if (mg_flare1)
	{
		emit-sfx MG_MUZZLEFLASH from mg_flare1_1;
		sleep 200;
	} else
	{
		emit-sfx MG_MUZZLEFLASH from mg_flare1_1;
		sleep 200;
	}
	mg_flare1 = !mg_flare1;
}
//.50 cal #1 ground targets
QueryWeapon9(piecenum)
{
	if(mg_flare2)
	{
		piecenum = mg_flare2_1;
	} else
	{
		piecenum = mg_flare2_2;
	}
}

AimFromWeapon9(piecenum)
{
	piecenum = mg_turret2;
}

AimWeapon9(heading, pitch)
{
	signal SIG_AIM8;
	set-signal-mask SIG_AIM8|SIG_DEATH;
	turn mg_turret2 to y-axis heading speed MG05_TURRET_TURN;
	turn mg_guns2 to x-axis (0-pitch) speed MG05_TURRET_PITCH;
	wait-for-turn mg_turret2 around y-axis;
	wait-for-turn mg_guns2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

ShotWeapon9()
{
	if (mg_flare2)
	{
		emit-sfx MG_MUZZLEFLASH from mg_flare2_1;
		sleep 200;
	} else
	{
	emit-sfx MG_MUZZLEFLASH from mg_flare2_2;
		sleep 200;
	}
	mg_flare2 = !mg_flare2;
}

//.50 cal #2 air targets
QueryWeapon10(piecenum)
{
	if(mg_flare2)
	{
		piecenum = mg_flare2_1;
	} else
	{
		piecenum = mg_flare2_2;
	}
}

AimFromWeapon10(piecenum)
{
	piecenum = mg_turret2;
}

AimWeapon10(heading, pitch)
{
	signal SIG_AIM8;
	set-signal-mask SIG_AIM8|SIG_DEATH;
	turn mg_turret2 to y-axis heading speed MG05_TURRET_TURN;
	turn mg_guns2 to x-axis (0-pitch) speed MG05_TURRET_PITCH;
	wait-for-turn mg_turret2 around y-axis;
	wait-for-turn mg_guns2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

ShotWeapon10()
{
	if (mg_flare2)
	{
		emit-sfx MG_MUZZLEFLASH from mg_flare2_1;
		sleep 200;
	} else
	{
	emit-sfx MG_MUZZLEFLASH from mg_flare2_2;
		sleep 200;
	}
	mg_flare2 = !mg_flare2;
}

//.50 cal #2 ground targets
QueryWeapon11(piecenum)
{
	if(mg_flare2)
	{
		piecenum = mg_flare2_1;
	} else
	{
		piecenum = mg_flare2_2;
	}
}

AimFromWeapon11(piecenum)
{
	piecenum = mg_turret2;
}

AimWeapon11(heading, pitch)
{
	signal SIG_AIM8;
	set-signal-mask SIG_AIM8|SIG_DEATH;
	turn mg_turret2 to y-axis heading speed MG05_TURRET_TURN;
	turn mg_guns2 to x-axis (0-pitch) speed MG05_TURRET_PITCH;
	wait-for-turn mg_turret2 around y-axis;
	wait-for-turn mg_guns2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

ShotWeapon11()
{
	if (mg_flare2)
	{
		emit-sfx MG_MUZZLEFLASH from mg_flare2_1;
		sleep 200;
	} else
	{
	emit-sfx MG_MUZZLEFLASH from mg_flare2_2;
		sleep 200;
	}
	mg_flare2 = !mg_flare2;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		turn hull to z-axis HULL_LIST_ANGLE_Z speed HULL_LIST_SPEED;
		turn hull to x-axis HULL_LIST_ANGLE_X speed HULL_LIST_SPEED;
		wait-for-turn hull around z-axis;
		wait-for-turn hull around x-axis;
		//explode hull type BITMAPONLY|BITMAP1;
		return (TRUE);
	}
	corpsetype = 2;
	explode hull type SHATTER|FALL;
	if(isTorp1Ready)
	{
		explode torpedo1 type SHATTER|FALL;
	}
	if(isTorp2Ready)
	{
		explode torpedo2 type SHATTER|FALL;
	}
	if(isTorp3Ready)
	{
		explode torpedo3 type SHATTER|FALL;
	}
	if(isTorp4Ready)
	{
		explode torpedo4 type SHATTER|FALL;
	}
	return (TRUE);
}