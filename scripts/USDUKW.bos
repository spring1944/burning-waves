#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, load_shoulder, load_arm, axle1, axle2, axle3, propeller, wake;
 
static-var restore_delay, skip, bMoving, bFloating, WaterSpeed, LandSpeed;

// Signal definitions
#define SIG_AIM				2
#define INFANTRY			458752 //983040 // this is 65536 * s3o model radius
#define FUDGE				50 // isn't enough even between smg and rifle

#define PROP_SPIN			<1200>
#define FLOAT_DEPTH			[-3]

#include "amphib.h"

// Transport script courtesy of Zwzsg's script for Spring SW imptroopc
TransportPickup(unitid)
{
	if( get UNIT_ALLIED(unitid) == 1) { // only pick up allied units
		if( get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) <= [95.000000] )
		{
			set BUSY to 1;
			turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - get UNIT_XZ(unitid)) now;
			move load_arm to z-axis get XZ_HYPOT(get UNIT_XZ(unitid) - get PIECE_XZ(base)) now;
			turn load_arm to y-axis get XZ_ATAN(get UNIT_XZ(unitid) - get PIECE_XZ(base)) now;
			attach-unit unitid to load_arm;
			move load_arm to z-axis [10.000000] speed [300.000000];
			wait-for-move load_arm along z-axis;
			if( get UNIT_HEIGHT (unitid) == INFANTRY) 
			{ 
			//<= INFANTRY + FUDGE ) { // when using FUDGE
			  attach-unit unitid to 0 - 1; // hide infantry models
			}
/*			if( get UNIT_HEIGHT (unitid) != INFANTRY) 
			{ 
			//> INFANTRY + FUDGE ) {  // when using FUDGE
			  attach-unit unitid to tow_point; // don't hide other units
			}*/
			set BUSY to 0;
		}
	}
}

TransportDrop(unitid, position)
{
	skip = skip + 1;
	if (skip == 2) skip = 0;
	if (skip != 0) return;
	var Func_Var_3;
	Func_Var_3 = get XZ_HYPOT(get PIECE_XZ(base) - position) + [5];
	//if( Func_Var_3 >= 0 AND Func_Var_3 <= [95.000000] )
	//{
		set BUSY to 1;
		//spin load_shoulder around y-axis speed <50>;
		turn load_shoulder to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
		//move load_arm to z-axis [10.000000] now;
		//turn load_arm to y-axis get XZ_ATAN(get PIECE_XZ(base) - position) now;
		attach-unit unitid to load_arm;
		move load_arm to z-axis Func_Var_3 speed [600.000000];
		wait-for-move load_arm along z-axis;
		drop-unit unitid;
		move load_arm to z-axis [0.000000] now;
		wait-for-move load_arm along z-axis;
		if( get XZ_HYPOT(get PIECE_XZ(base) - get UNIT_XZ(unitid)) < [1.000000] )
		{
			attach-unit unitid to 0 - 1;
		}
		//stop-spin load_shoulder around y-axis;
		sleep 10;
		set BUSY to 0;
	//}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	set ACTIVATION to 1;
	bMoving = TRUE;
	/*emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;
	sleep 50;
	emit-sfx 257 from exhaust;*/
	spin axle1 around x-axis speed <350.082418>;
	spin axle2 around x-axis speed <350.082418>;
	spin axle3 around x-axis speed <350.082418>;
	if(bFloating)
	{
		spin propeller around z-axis speed PROP_SPIN;
	}
}

StopMoving()
{
	set ACTIVATION to 0;
	bMoving = FALSE;
	stop-spin axle1 around x-axis decelerate <100.000000>;
	stop-spin axle2 around x-axis decelerate <100.000000>;
	stop-spin axle3 around x-axis decelerate <100.000000>;
	stop-spin propeller around z-axis;
}

Create()
{
//	spin tow_point around y-axis speed <100>;
	LandSpeed = get MAX_SPEED;
	WaterSpeed = LandSpeed * 0.12; // land speed: 50 mph, water speed: 6 mph
	start-script SmokeUnit();
	bFloating = FALSE;
	skip = 0;
	start-script WaterCheck();
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

Killed(severity, corpsetype)
{
	if( severity <= 999 )
	{
		if (get GROUND_WATER_HEIGHT(get PIECE_XZ(hull))<=FLOAT_DEPTH)
		{
			corpsetype = 2;
		}
		else
		{
			corpsetype = 1;
		}
		return (0);
	}
	corpsetype = 1;
	explode hull type SHATTER;
}
