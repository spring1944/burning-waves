#define TAK

piece base, hull, ramp, turret, grabber, link,
	  wake1, wake2, wake3;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Ramp
#define RAMP_OPEN_ANGLE		<90>
#define RAMP_OPEN_SPEED		<30>

#define LOAD_DIST			[125]

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_LOAD			4

#define SMOKEPIECE	hull

#include "exptype.h"
#include "sfxtype.h"
#include "damageSmoke.h"
static-var					MaxSpeed, bRampOpen, bMoving, bTooFar, boom_len, boom_heading, boom_pitch;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

Create()
{
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
}

OpenRamp()
{
	var newSpeed;
	// we are opening the ramp, let's slow down (else we'll have the hold full of water)
	newSpeed = MaxSpeed/10;
	set MAX_SPEED to newSpeed;
	turn ramp to x-axis RAMP_OPEN_ANGLE speed RAMP_OPEN_SPEED;
	wait-for-turn ramp around x-axis;
	bRampOpen = TRUE;
	return;
}

CloseRamp()
{
	bRampOpen = FALSE;
	turn ramp to x-axis 0 speed RAMP_OPEN_SPEED;
	wait-for-turn ramp around x-axis;
	// now the ramp is closed, we can go full speed again
	set MAX_SPEED to MaxSpeed;
	return;
}

//Transport stuff
BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

TransportPickup(unitid)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid));
	if( bTooFar )
	{
		return (FALSE);
	}
	call-script OpenRamp();
	while (!bRampOpen)
	{
		sleep 250;
	}
	set BUSY to 1;
	attach-unit unitid to (0-1);
	sleep 500;
	set BUSY to 0;
	sleep 2500;
	start-script CloseRamp();
}

TransportDrop(unitid, position)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(position,get GROUND_HEIGHT(position));
	if( bTooFar )
	{
		return (1);
	}
	call-script OpenRamp();
	while (!bRampOpen)
	{
		sleep 250;
	}
	set BUSY to 1;
	attach-unit unitid to link;
	call-script PositionLink();
	sleep 50;
	drop-unit unitid;
	call-script ReturnLink();
	sleep 1000;
	set BUSY to 0;
	sleep 1500;
	start-script CloseRamp();
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	bMoving = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<50)
	{
		corpsetype = 1;
		return (TRUE);
	}
	corpsetype = 2;
	explode hull type		SHATTER|BITMAP1;
	return (TRUE);
}