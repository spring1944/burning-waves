#define TAK

piece base, hull1, hull2, railings1, railings2, boats,
	  main_turret_a, main_sleeve_a, main_barrel1_a, main_flare1_a, main_barrel2_a, main_flare2_a,
	  main_turret_b, main_sleeve_b, main_barrel1_b, main_flare1_b, main_barrel2_b, main_flare2_b,
	  main_turret_c, main_sleeve_c, main_barrel1_c, main_flare1_c, main_barrel2_c, main_flare2_c,
	  pom_turret, pom_sleeve, pom_barrel1, pom_flare1, pom_barrel2, pom_flare2, pom_barrel3, pom_flare3, pom_barrel4, pom_flare4,
	  turret_20_1, sleeve_20_1, barrel_20_1, flare_20_1, turret_20_2, sleeve_20_2, barrel_20_2, flare_20_2,
	  exhaust1, wake1, wake2, wake3, wake4;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Turret turn speeds
#define MAIN_TURRET_TURN		<20>
#define MAIN_TURRET_PITCH		<20>

#define POM_TURRET_TURN			<25>
#define POM_TURRET_PITCH		<25>

#define AA20_TURRET_TURN			<30>
#define AA20_TURRET_PITCH			<45>

//*********************Recoil
#define MAIN_GUN_RECOIL			[1]
#define MAIN_GUN_RECOIL_SPEED	[10]
#define MAIN_GUN_BACK_SPEED		[2]

#define POM_GUN_RECOIL			[0.4]
#define POM_GUN_RECOIL_SPEED	[10]
#define POM_GUN_BACK_SPEED		[2]

#define AA20_GUN_RECOIL			[0.3]
#define AA20_GUN_RECOIL_SPEED	[10]
#define AA20_GUN_BACK_SPEED		[3]

//*********************Death anim
#define HULL_LIST_SPEED			<10>
#define HULL_LIST_ANGLE			<90>

//********************Engine smoke
#define ENGINE_SMOKE_PIECE	exhaust1
#define ENGINE_SMOKE_PERIOD	200

#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16
#define SIG_AIM4			32
#define SIG_AIM5			64
#define SIG_AIM6			128

#define ALL_WEAPON_SIGS		SIG_AIM1|SIG_AIM2|SIG_AIM3|SIG_AIM4|SIG_AIM5|SIG_AIM6

#define SMOKEPIECE	hull1

#include "exptype.h"
#include "sfxtype.h"
#include "damageSmoke.h"
static-var	CurrentSpeed, bMoving, main_flare_a, main_flare_b, main_flare_c, pom_flare,
			oldXZ, oldHeading;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			emit-sfx SFXTYPE_BLACKSMOKE from ENGINE_SMOKE_PIECE;
			sleep ENGINE_SMOKE_PERIOD;
		}
		sleep 500;
	}
}

InitTurrets()
//Pre-position turrets
{
	turn main_turret_b to y-axis <180> now;
	turn main_turret_c to y-axis <180> now;
	turn pom_turret to y-axis <180> now;
	main_flare_a=TRUE;
	main_flare_b=TRUE;
	main_flare_c=TRUE;
	pom_flare=1;
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

Create()
{
	bMoving = FALSE;
	call-script InitTurrets();
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
}

SweetSpot(piecenum)
{
	piecenum = hull1;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		emit-sfx 2 from wake4;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var newXZ, newHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	bMoving = TRUE;
}

RestoreTurret()
{
	set-signal-mask SIG_DEATH|ALL_WEAPON_SIGS;
	sleep RESTORE_PERIOD;

	turn main_turret_a to y-axis <0> speed MAIN_TURRET_TURN;
	turn main_sleeve_a to x-axis <0> speed MAIN_TURRET_PITCH;
	turn main_turret_b to y-axis <180> speed MAIN_TURRET_TURN;
	turn main_sleeve_b to x-axis <0> speed MAIN_TURRET_PITCH;
	turn main_turret_c to y-axis <180> speed MAIN_TURRET_TURN;
	turn main_sleeve_c to x-axis <0> speed MAIN_TURRET_PITCH;

	turn pom_turret to y-axis <180> speed POM_TURRET_TURN;
	turn pom_sleeve to x-axis <0> speed POM_TURRET_PITCH;

	turn turret_20_1 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis <0> speed AA20_TURRET_PITCH;
	turn turret_20_2 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis <0> speed AA20_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	if(main_flare_a)
	{
		piecenum = main_flare1_a;
	} else
	{
		piecenum = main_flare2_a;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = main_turret_a;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn main_turret_a to y-axis heading speed MAIN_TURRET_TURN;
	turn main_sleeve_a to x-axis (0-pitch) speed MAIN_TURRET_PITCH;
	wait-for-turn main_turret_a around y-axis;
	wait-for-turn main_sleeve_a around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	if(main_flare_a)
	{
		show main_flare1_a;
		move main_barrel1_a to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
		sleep 200;
		move main_barrel1_a to z-axis [0] speed MAIN_GUN_BACK_SPEED;
		hide main_flare1_a;
	} else
	{
		show main_flare2_a;
		move main_barrel2_a to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
		sleep 200;
		move main_barrel2_a to z-axis [0] speed MAIN_GUN_BACK_SPEED;
		hide main_flare2_a;
	}
	main_flare_a = !main_flare_a;
}

QueryWeapon2(piecenum)
{
	if(main_flare_b)
	{
		piecenum = main_flare1_b;
	} else
	{
		piecenum = main_flare2_b;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = main_turret_b;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	turn main_turret_b to y-axis heading speed MAIN_TURRET_TURN;
	turn main_sleeve_b to x-axis (0-pitch) speed MAIN_TURRET_PITCH;
	wait-for-turn main_turret_b around y-axis;
	wait-for-turn main_sleeve_b around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
	if(main_flare_b)
	{
		show main_flare1_b;
		move main_barrel1_b to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
		sleep 200;
		move main_barrel1_b to z-axis [0] speed MAIN_GUN_BACK_SPEED;
		hide main_flare1_b;
	} else
	{
		show main_flare2_b;
		move main_barrel2_b to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
		sleep 200;
		move main_barrel2_b to z-axis [0] speed MAIN_GUN_BACK_SPEED;
		hide main_flare2_b;
	}
	main_flare_b = !main_flare_b;
}

QueryWeapon3(piecenum)
{
	if(main_flare_c)
	{
		piecenum = main_flare1_c;
	} else
	{
		piecenum = main_flare2_c;
	}
}

AimFromWeapon3(piecenum)
{
	piecenum = main_turret_c;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3|SIG_DEATH;
	turn main_turret_c to y-axis heading speed MAIN_TURRET_TURN;
	turn main_sleeve_c to x-axis (0-pitch) speed MAIN_TURRET_PITCH;
	wait-for-turn main_turret_c around y-axis;
	wait-for-turn main_sleeve_c around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
	if(main_flare_c)
	{
		show main_flare1_c;
		move main_barrel1_c to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
		sleep 200;
		move main_barrel1_c to z-axis [0] speed MAIN_GUN_BACK_SPEED;
		hide main_flare1_c;
	} else
	{
		show main_flare2_c;
		move main_barrel2_c to z-axis (0-MAIN_GUN_RECOIL) speed MAIN_GUN_RECOIL_SPEED;
		sleep 200;
		move main_barrel2_c to z-axis [0] speed MAIN_GUN_BACK_SPEED;
		hide main_flare2_c;
	}
	main_flare_c = !main_flare_c;
}

QueryWeapon4(piecenum)
{
	if(pom_flare == 1)
	{
		piecenum = pom_flare1;
	}
	if(pom_flare == 2)
	{
		piecenum = pom_flare2;
	}
	if(pom_flare == 3)
	{
		piecenum = pom_flare3;
	}
	if(pom_flare == 4)
	{
		piecenum = pom_flare4;
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = pom_turret;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM4;
	set-signal-mask SIG_AIM4|SIG_DEATH;
	turn pom_turret to y-axis heading speed POM_TURRET_TURN;
	turn pom_sleeve to x-axis (0-pitch) speed POM_TURRET_PITCH;
	wait-for-turn pom_turret around y-axis;
	wait-for-turn pom_sleeve around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon4()
{
	if(pom_flare == 1)
	{
		show pom_flare1;
		move pom_barrel1 to z-axis (0-POM_GUN_RECOIL) speed POM_GUN_RECOIL_SPEED;
		sleep 200;
		move pom_barrel1 to z-axis [0] speed POM_GUN_BACK_SPEED;
		hide pom_flare1;
	}
	if(pom_flare == 2)
	{
		show pom_flare2;
		move pom_barrel2 to z-axis (0-POM_GUN_RECOIL) speed POM_GUN_RECOIL_SPEED;
		sleep 200;
		move pom_barrel2 to z-axis [0] speed POM_GUN_BACK_SPEED;
		hide pom_flare2;
	}
	if(pom_flare == 3)
	{
		show pom_flare3;
		move pom_barrel3 to z-axis (0-POM_GUN_RECOIL) speed POM_GUN_RECOIL_SPEED;
		sleep 200;
		move pom_barrel3 to z-axis [0] speed POM_GUN_BACK_SPEED;
		hide pom_flare3;
	}
	if(pom_flare == 4)
	{
		show pom_flare4;
		move pom_barrel4 to z-axis (0-POM_GUN_RECOIL) speed POM_GUN_RECOIL_SPEED;
		sleep 200;
		move pom_barrel4 to z-axis [0] speed POM_GUN_BACK_SPEED;
		hide pom_flare4;
	}
	pom_flare = pom_flare + 1;
	if(pom_flare>4)
	{
		pom_flare = 4;
	}
}

QueryWeapon5(piecenum)
{
	piecenum = flare_20_1;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret_20_1;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM5;
	set-signal-mask SIG_AIM5|SIG_DEATH;
	turn turret_20_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_1 around y-axis;
	wait-for-turn sleeve_20_1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon5()
{
	show flare_20_1;
	move barrel_20_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_1 to z-axis [0] speed AA20_GUN_BACK_SPEED;
	hide flare_20_1;
}

QueryWeapon6(piecenum)
{
	piecenum = flare_20_2;
}

AimFromWeapon6(piecenum)
{
	piecenum = turret_20_2;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM6;
	set-signal-mask SIG_AIM6|SIG_DEATH;
	turn turret_20_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_20_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_20_2 around y-axis;
	wait-for-turn sleeve_20_2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon6()
{
	show flare_20_2;
	move barrel_20_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_20_2 to z-axis [0] speed AA20_GUN_BACK_SPEED;
	hide flare_20_2;
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		turn hull1 to z-axis (0-HULL_LIST_ANGLE) speed HULL_LIST_SPEED;
		wait-for-turn hull1 around z-axis;
		return (TRUE);
	}
	corpsetype = 2;
	explode hull1 type		SHATTER|BITMAP1;
	explode hull2 type		SHATTER|BITMAP1;
	return (TRUE);
}