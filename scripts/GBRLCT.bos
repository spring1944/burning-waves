#define TAK

piece base, hull, ramp, turret_1, sleeve_1, barrel_1, flare_1, turret_2, sleeve_2, barrel_2, flare_2,
	  railings1, railings2,
	  load1, load2, load3, load4, load5, load6, load7, load8, load9, turret, grabber, link,
	  wake1, wake2, wake3, wake4;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//********************Turret turn speeds
#define AA20_TURRET_TURN		<40>
#define AA20_TURRET_PITCH		<45>

//*********************Recoil
#define AA20_GUN_RECOIL			[0.4]
#define AA20_GUN_RECOIL_SPEED	[10]
#define AA20_GUN_BACK_SPEED		[1]

//*********************Ramp
#define RAMP_OPEN_ANGLE			<90>
#define RAMP_OPEN_SPEED			<30>

//*********************Load distance
#define LOAD_DIST				[125]

//*********************Death anim
#define HULL_LIST_SPEED		<2.5>
#define HULL_LIST_ANGLE		<-5>

#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_LOAD			16

#define SMOKEPIECE	hull

#include "exptype.h"
#include "sfxtype.h"
#include "damageSmoke.h"
static-var	MaxSpeed, bMoving, unit1, unit2, unit3, unit4, unit5, unit6, unit7, unit8, unit9, bTooFar, bRampOpen, LastUnloadPoint, boom_len, boom_heading, boom_pitch;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

Create()
{
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	// we have no cargo yet
	unit1 = -1;
	unit2 = -1;
	unit3 = -1;
	unit4 = -1;
	unit5 = -1;
	unit6 = -1;
	unit7 = -1;
	unit8 = -1;
	unit9 = -1;
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		emit-sfx 2 from wake4;
		sleep 300;
	}
}

OpenRamp()
{
	var newSpeed;
	// we are opening the ramp, let's slow down (else we'll have the hold full of water)
	newSpeed = MaxSpeed/10;
	set MAX_SPEED to newSpeed;
	turn ramp to x-axis RAMP_OPEN_ANGLE speed RAMP_OPEN_SPEED;
	wait-for-turn ramp around x-axis;
	bRampOpen = TRUE;
	return;
}

CloseRamp()
{
	bRampOpen = FALSE;
	turn ramp to x-axis 0 speed RAMP_OPEN_SPEED;
	wait-for-turn ramp around x-axis;
	// now the ramp is closed, we can go full speed again
	set MAX_SPEED to MaxSpeed;
	return;
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	bMoving = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_DEATH;
	sleep RESTORE_PERIOD;

	turn turret_1 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_1 to x-axis <0> speed AA20_TURRET_PITCH;

	turn turret_2 to y-axis <0> speed AA20_TURRET_TURN;
	turn sleeve_2 to x-axis <0> speed AA20_TURRET_PITCH;
}

QueryWeapon1(piecenum)
{
	piecenum = flare_1;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret_1;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1|SIG_DEATH;
	turn turret_1 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_1 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_1 around y-axis;
	wait-for-turn sleeve_1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	show flare_1;
	sleep 200;
	hide flare_1;
}

Shot1(foo)
{
	move barrel_1 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_1 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

QueryWeapon2(piecenum)
{
	piecenum = flare_2;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret_2;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2|SIG_DEATH;
	turn turret_2 to y-axis heading speed AA20_TURRET_TURN;
	turn sleeve_2 to x-axis (0-pitch) speed AA20_TURRET_PITCH;
	wait-for-turn turret_2 around y-axis;
	wait-for-turn sleeve_2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
	show flare_2;
	sleep 200;
	hide flare_2;
}

Shot2(foo)
{
	move barrel_2 to z-axis (0-AA20_GUN_RECOIL) speed AA20_GUN_RECOIL_SPEED;
	sleep 200;
	move barrel_2 to z-axis [0] speed AA20_GUN_BACK_SPEED;
}

//Transport stuff
BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

CargoCheck()
//This should check all the carried units and remove any dead ones
{
	var loadxz, unitxz, dist;
	set-signal-mask SIG_LOAD;
	while(TRUE)
	{
		if(unit1>(0-1))
		{
			loadxz = get PIECE_XZ(load1);
			unitxz = get UNIT_XZ(unit1);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit1 = -1;
			}
		}
		if(unit2>(0-1))
		{
			loadxz = get PIECE_XZ(load2);
			unitxz = get UNIT_XZ(unit2);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit2 = -1;
			}
		}
		if(unit3>(0-1))
		{
			loadxz = get PIECE_XZ(load3);
			unitxz = get UNIT_XZ(unit3);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit3 = -1;
			}
		}
		if(unit4>(0-1))
		{
			loadxz = get PIECE_XZ(load4);
			unitxz = get UNIT_XZ(unit4);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit4 = -1;
			}
		}
		if(unit5>(0-1))
		{
			loadxz = get PIECE_XZ(load5);
			unitxz = get UNIT_XZ(unit5);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit5 = -1;
			}
		}
		if(unit6>(0-1))
		{
			loadxz = get PIECE_XZ(load6);
			unitxz = get UNIT_XZ(unit6);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit6 = -1;
			}
		}
		if(unit7>(0-1))
		{
			loadxz = get PIECE_XZ(load7);
			unitxz = get UNIT_XZ(unit7);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit7 = -1;
			}
		}
		if(unit8>(0-1))
		{
			loadxz = get PIECE_XZ(load8);
			unitxz = get UNIT_XZ(unit8);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit8 = -1;
			}
		}
		if(unit9>(0-1))
		{
			loadxz = get PIECE_XZ(load9);
			unitxz = get UNIT_XZ(unit9);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit9 = -1;
			}
		}
		sleep 1000;
	}
}

TransportPickup(unitid)
{
	var bAlreadyPlaced;
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
	bAlreadyPlaced = FALSE;
    call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid));
	if( bTooFar )
	{
		return (1);
	}
	call-script OpenRamp();
	while (!bRampOpen)
	{
		sleep 250;
	}
	set BUSY to 1;
	//Determine next free unit slot
	if (unit1 == -1)
	{
		attach-unit unitid to load1;
		unit1 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit2 == -1)
	{
		attach-unit unitid to load2;
		unit2 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit3 == -1)
	{
		attach-unit unitid to load3;
		unit3 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit4 == -1)
	{
		attach-unit unitid to load4;
		unit4 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit5 == -1)
	{
		attach-unit unitid to load5;
		unit5 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit6 == -1)
	{
		attach-unit unitid to load6;
		unit6 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit7 == -1)
	{
		attach-unit unitid to load7;
		unit7 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit8 == -1)
	{
		attach-unit unitid to load8;
		unit8 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit9 == -1)
	{
		attach-unit unitid to load9;
		unit9 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	{
		attach-unit unitid to 0 - 1;
	}
	start-script CargoCheck();
	sleep 500;
	set BUSY to 0;
	sleep 2500;
	start-script CloseRamp();
}

TransportDrop(unitid, position)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(position,get GROUND_HEIGHT(position));
	if( bTooFar )
	{
		return (1);
	}
	call-script OpenRamp();
	while (!bRampOpen)
	{
		sleep 250;
	}
	set BUSY to 1;
	attach-unit unitid to link;
	call-script PositionLink();
	sleep 50;
	drop-unit unitid;
//	call-script AreaUnload(unitid,[210.000000]);
	//Determine a unit slot to free
	if (unit1 == unitid)
	{
		unit1 = -1;
	} else
	if (unit2 == unitid)
	{
		unit2 = -1;
	} else
	if (unit3 == unitid)
	{
		unit3 = -1;
	} else
	if (unit4 == unitid)
	{
		unit4 = -1;
	} else
	if (unit5 == unitid)
	{
		unit5 = -1;
	} else
	if (unit6 == unitid)
	{
		unit6 = -1;
	} else
	if (unit7 == unitid)
	{
		unit7 = -1;
	} else
	if (unit8 == unitid)
	{
		unit8 = -1;
	} else
	if (unit9 == unitid)
	{
		unit9 = -1;
	}
	call-script ReturnLink();
	sleep 1000;
	set BUSY to 0;
	sleep 1500;
	start-script CloseRamp();
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		start-script OpenRamp();
		turn hull to x-axis HULL_LIST_ANGLE speed HULL_LIST_SPEED;
		wait-for-turn hull around x-axis;
		explode hull type		BITMAPONLY|BITMAP1;
		return (TRUE);
	}
	corpsetype = 2;
	explode hull type		SHATTER|BITMAP1;
	explode turret_1 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode turret_2 type	FALL|EXPLODE_ON_HIT|FIRE;
	return (TRUE);
}